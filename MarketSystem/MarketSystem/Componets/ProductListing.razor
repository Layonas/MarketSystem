@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop
@using Models;
@using Services;
@using System.Text.Json;
@inject JsonFileProductService productService;
@inject IHttpContextAccessor httpContext;
@inject ShopCartService shopCartService;
@inject IJSRuntime js;

<table class="table table-hover">
    <thead>
        <tr>
            <th>Product</th>
            <th>In store</th>
            <th>Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var p in productService.GetProducts())
        {
            <tr @onclick="@(e => SelectProduct(p))" data-bs-toggle="modal" data-bs-target="#productModal">
                <th>@p.Name</th>
                <th>@p.Quantity</th>
                <th>@p.Price</th>
            </tr>
        }
    </tbody>
</table>

<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        @if(product is not null)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@product.Name</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <p class="card-text">@product.Name</p>
                            <p class="card-text">@product.Quantity</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="number" min="0" max="@(product.Quantity - productList[product.Name])" id="addAmount" @bind="@addAmount" placeholder="Amount">
                    @if (productList[product.Name] != 0)
                    {
                        <p class="text-danger">You have in your cart: @productList[product.Name]</p>
                    }
                    <button type="button" class="btn btn-primary" @onclick="@(e => addToCart(product))">Add</button>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cartTitle">
                    Your shopping cart
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <div class="card-body">
                        @foreach(KeyValuePair<string, int?> entry in productList)
                        {
                            if(entry.Value != 0)
                            {
                                <p class="card-text">You have @String.Concat(entry.Value, "x") of @entry.Key</p>
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a href="/ShoppingCart">
                    <button type="button" class="btn btn-primary" aria-label="Go to cart">Go to cart</button>
                </a>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    Product? product;
    Dictionary<string, int?> productList;
    private string? agent{ get; set; }
    private ShopCart? shopCart { get; set; }
    public int addAmount { get; set; } = 0;
    public Tuple<double, double, double> button { get; set; } = Tuple.Create(0.0, 0.0, 0.0);

    void SelectProduct(Product p)
    {
        Console.WriteLine(p.Name);
        product = p;
    }

    void addToCart(Product product)
    {
        productList[product.Name] = addAmount;
        addAmount = 0;
        int quantity = Convert.ToInt32(productList[product.Name]);
        Product addedProduct = new Product(product.Name, quantity, product.Price);

        shopCartService.addProductToCart(addedProduct, agent);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        productList = new Dictionary<string, int?>();
        agent = httpContext?.HttpContext?.Request?.Headers["User-Agent"];
        Console.WriteLine(agent);

        if (agent is null)
            return;
        shopCart = shopCartService.GetShopCart(agent);

        foreach (var p in productService.GetProducts())
            if (p is not null || p.Name is not null)
                productList.Add(p.Name, 0);

        if (shopCart is null || shopCart.products is null)
            return;

        foreach (var item in shopCart.products)
            productList[item.Name] = item.Quantity;
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            await js.InvokeVoidAsync("changeModalValueOnClose");
            await js.InvokeVoidAsync("addModalToCartButton");

            var btnLeft = await js.InvokeAsync<double>("getOffsetLeft", "cartButton");
            var btnTop = await js.InvokeAsync<double>("getOffsetTop", "cartButton");
            var btnHeight = await js.InvokeAsync<double>("getOffsetHeight", "cartButton");
            button = Tuple.Create(btnLeft, btnTop, btnHeight);
        }
    }
}
