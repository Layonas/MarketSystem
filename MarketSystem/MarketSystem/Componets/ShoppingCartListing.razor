@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop
@using Models;
@using Services;
@inject IHttpContextAccessor httpContext;
@inject JsonFileProductService productService;
@inject ShopCartService shoppingCartService;
@inject IJSRuntime js;

<table class="table table-hover">
    <thead>
        <tr>
            <th>Product</th>
            <th>Amount to buy</th>
            <th>Price per stack</th>
            <th>Total price</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var p in shoppingCartList.products)
        {
            <tr class="border-end-0">
                <th>@p.Name</th>
                <th>
                    <input type="number" class="form-control w-25" min="0" max="@productList.First(prod => prod.Name == p.Name).Quantity" @bind="@p.Quantity" @oninput="@(e => { if (Convert.ToInt32(e.Value) == 0) zeroQuantityAlert(p) ;})">
                </th>
                <th>@p.Price</th>
                <th>@(p.Price*p.Quantity)</th>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <th class="fw-bold">Total: </th>
            <th></th>
            <th></th>
            <th class="fw-bold">@shoppingCartPrice()</th>
        </tr>
    </tfoot>
</table>
<form class="d-flex">
    <button class="btn btn-primary" type="button" aria-label="Buy" @onclick="@(e => itemsBought())">Buy</button>
</form>

<div class="modal fade" id="zeroModal" tabindex="-1" aria-labelledby="zeroTitle" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header alert alert-success">
                <h5 class="modal-title">Are you sure...</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to remove the product?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" aria-label="Yes" @onclick="@(e => removeProductFromCart())">Yes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="No" @onclick="@(e => retainItemInCart())">No</button>          </div>
        </div>
    </div>
</div>

@code {

    public ShopCart shoppingCartList { get;set;}
    public string? agent { get; set; }
    public IEnumerable<Product> productList { get; set; }
    public Product product { get; set; }

    protected override void OnInitialized()
    {
        agent = httpContext.HttpContext?.Request?.Headers["User-Agent"];

        shoppingCartList = shoppingCartService.GetShopCart(agent);

        productList = productService.GetProducts();
    }

    public decimal? shoppingCartPrice()
    {
        decimal? amount = 0;
        foreach (var product in shoppingCartList.products)
            amount += product.Price * product.Quantity;

        return amount;
    }

    public void zeroQuantityAlert(Product product)
    {
        this.product = product;
        js.InvokeAsync<bool>("zeroQuantityAlert");
    }

    public void removeProductFromCart()
    {
        shoppingCartList.products = shoppingCartList.products.Where(item => item.Name != product.Name);
        shoppingCartService.updateShoppingCart(shoppingCartList);
    }

    public void retainItemInCart()
    {
        product.Quantity = 1;
        shoppingCartList.products.First(item => item.Name == product.Name).Quantity = 1;
        shoppingCartService.updateShoppingCart(shoppingCartList);
    }

    public void itemsBought()
    {
        foreach(var prod in shoppingCartList.products)
        {
            productList.First(item => item.Name == prod.Name).Quantity -= prod.Quantity;
        }

        shoppingCartList.products = Enumerable.Empty<Product>();

        shoppingCartService.updateShoppingCart(shoppingCartList);
        productService.updateProductList(productList);

    }
}
